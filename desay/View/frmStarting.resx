<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timerStart.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAMAAAAGAAAACAAAAAgAAAAHAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABgAAAB4AAAA1AAAARgAAAFQAAABfAAAAaAAAAG4AAABwAAAAbgAAAGMAAABMAAAAKwAA
        AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AJMAAABfAAAANgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAALwAAAFsAAACEAAAAogAAALUAAAC/AAAAwAAA
        ALoAAACtAAAAlwAAAHUAAABHAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAA
        AAoAAAAKAAAABwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////AA///gAA//4AAD/+AAAPwgAAB8EAAAPAAAADwAA
        AAcAAAAHAAAAAwAAAAMAAAABAAAAAQAAAAEAAAABAAAAAIAAAADAAAAA4AAAAPAAAAD4AAAA/AAAAP4A
        AAH/gAAD/+AAA//+AA////////////////8=
</value>
  </data>
</root>